import {
  AutoComplete,
  CheckBoxSelection,
  ComboBox,
  ComponentBase,
  DropDownBase,
  DropDownList,
  DropDownTree,
  FieldSettings,
  Fields,
  ListBox,
  Mention,
  MultiSelect,
  Search,
  SelectionSettings,
  ToolbarSettings,
  TreeSettings,
  VirtualScroll,
  createFloatLabel,
  dropDownBaseClasses,
  dropDownListClasses,
  encodePlaceholder,
  escapeCharRegExp,
  floatLabelBlur,
  floatLabelFocus,
  getProps,
  gh,
  highlightSearch,
  incrementalSearch,
  isExecute,
  removeFloating,
  resetIncrementalSearchValues,
  revertHighlightSearch,
  setPlaceHolder,
  updateFloatLabelState,
  vueDefineComponent
} from "./chunk-R5YW2REU.js";
import {
  getValue,
  isNullOrUndefined,
  isUndefined
} from "./chunk-2RBNARH7.js";
import "./chunk-RBDQOIXC.js";
import "./chunk-SSYGV25P.js";

// node_modules/@syncfusion/ej2-vue-dropdowns/src/drop-down-list/dropdownlist.component.js
var properties = ["isLazyUpdate", "plugins", "actionFailureTemplate", "allowFiltering", "cssClass", "dataSource", "enablePersistence", "enableRtl", "enableVirtualization", "enabled", "fields", "filterBarPlaceholder", "filterType", "floatLabelType", "footerTemplate", "groupTemplate", "headerTemplate", "htmlAttributes", "ignoreAccent", "ignoreCase", "index", "itemTemplate", "locale", "noRecordsTemplate", "placeholder", "popupHeight", "popupWidth", "query", "readonly", "showClearButton", "sortOrder", "text", "value", "valueTemplate", "width", "zIndex", "actionBegin", "actionComplete", "actionFailure", "beforeOpen", "blur", "change", "close", "created", "dataBound", "destroyed", "filtering", "focus", "open", "select"];
var modelProps = ["value"];
var testProp = getProps({ props: properties });
var props = testProp[0];
var watch = testProp[1];
var emitProbs = Object.keys(watch);
emitProbs.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var DropDownListComponent = vueDefineComponent({
  name: "DropDownListComponent",
  mixins: [ComponentBase],
  props,
  watch,
  emits: emitProbs,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new DropDownList({}),
      propKeys: properties,
      models: modelProps,
      hasChildDirective: false,
      hasInjectedModules: true,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    addItem: function(items, itemIndex) {
      return this.ej2Instances.addItem(items, itemIndex);
    },
    clear: function() {
      return this.ej2Instances.clear();
    },
    filter: function(dataSource, query, fields) {
      return this.ej2Instances.filter(dataSource, query, fields);
    },
    focusIn: function(e) {
      return this.ej2Instances.focusIn(e);
    },
    focusOut: function(e) {
      return this.ej2Instances.focusOut(e);
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    hidePopup: function(e) {
      return this.ej2Instances.hidePopup(e);
    },
    hideSpinner: function() {
      return this.ej2Instances.hideSpinner();
    },
    requiredModules: function() {
      return this.ej2Instances.requiredModules();
    },
    showPopup: function(e) {
      return this.ej2Instances.showPopup(e);
    },
    showSpinner: function() {
      return this.ej2Instances.showSpinner();
    }
  }
});
var DropDownListPlugin = {
  name: "ejs-dropdownlist",
  install: function(Vue) {
    Vue.component(DropDownListPlugin.name, DropDownListComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/combo-box/combobox.component.js
var properties2 = ["isLazyUpdate", "plugins", "actionFailureTemplate", "allowCustom", "allowFiltering", "autofill", "cssClass", "dataSource", "enablePersistence", "enableRtl", "enableVirtualization", "enabled", "fields", "filterBarPlaceholder", "filterType", "floatLabelType", "footerTemplate", "groupTemplate", "headerTemplate", "htmlAttributes", "ignoreAccent", "ignoreCase", "index", "itemTemplate", "locale", "noRecordsTemplate", "placeholder", "popupHeight", "popupWidth", "query", "readonly", "showClearButton", "sortOrder", "text", "value", "valueTemplate", "width", "zIndex", "actionBegin", "actionComplete", "actionFailure", "beforeOpen", "blur", "change", "close", "created", "customValueSpecifier", "dataBound", "destroyed", "filtering", "focus", "open", "select"];
var modelProps2 = ["value"];
var testProp2 = getProps({ props: properties2 });
var props2 = testProp2[0];
var watch2 = testProp2[1];
var emitProbs2 = Object.keys(watch2);
emitProbs2.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps2; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs2.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var ComboBoxComponent = vueDefineComponent({
  name: "ComboBoxComponent",
  mixins: [ComponentBase],
  props: props2,
  watch: watch2,
  emits: emitProbs2,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new ComboBox({}),
      propKeys: properties2,
      models: modelProps2,
      hasChildDirective: false,
      hasInjectedModules: true,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    addItem: function(items, itemIndex) {
      return this.ej2Instances.addItem(items, itemIndex);
    },
    clear: function() {
      return this.ej2Instances.clear();
    },
    filter: function(dataSource, query, fields) {
      return this.ej2Instances.filter(dataSource, query, fields);
    },
    focusIn: function() {
      return this.ej2Instances.focusIn();
    },
    focusOut: function(e) {
      return this.ej2Instances.focusOut(e);
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    hidePopup: function(e) {
      return this.ej2Instances.hidePopup(e);
    },
    hideSpinner: function() {
      return this.ej2Instances.hideSpinner();
    },
    requiredModules: function() {
      return this.ej2Instances.requiredModules();
    },
    showPopup: function(e) {
      return this.ej2Instances.showPopup(e);
    },
    showSpinner: function() {
      return this.ej2Instances.showSpinner();
    }
  }
});
var ComboBoxPlugin = {
  name: "ejs-combobox",
  install: function(Vue) {
    Vue.component(ComboBoxPlugin.name, ComboBoxComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/auto-complete/autocomplete.component.js
var properties3 = ["isLazyUpdate", "plugins", "actionFailureTemplate", "allowCustom", "allowFiltering", "autofill", "cssClass", "dataSource", "enablePersistence", "enableRtl", "enableVirtualization", "enabled", "fields", "filterBarPlaceholder", "filterType", "floatLabelType", "footerTemplate", "groupTemplate", "headerTemplate", "highlight", "htmlAttributes", "ignoreAccent", "ignoreCase", "index", "itemTemplate", "locale", "minLength", "noRecordsTemplate", "placeholder", "popupHeight", "popupWidth", "query", "readonly", "showClearButton", "showPopupButton", "sortOrder", "suggestionCount", "text", "value", "valueTemplate", "width", "zIndex", "actionBegin", "actionComplete", "actionFailure", "beforeOpen", "blur", "change", "close", "created", "customValueSpecifier", "dataBound", "destroyed", "filtering", "focus", "open", "select"];
var modelProps3 = ["value"];
var testProp3 = getProps({ props: properties3 });
var props3 = testProp3[0];
var watch3 = testProp3[1];
var emitProbs3 = Object.keys(watch3);
emitProbs3.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps3; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs3.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var AutoCompleteComponent = vueDefineComponent({
  name: "AutoCompleteComponent",
  mixins: [ComponentBase],
  props: props3,
  watch: watch3,
  emits: emitProbs3,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new AutoComplete({}),
      propKeys: properties3,
      models: modelProps3,
      hasChildDirective: false,
      hasInjectedModules: true,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    addItem: function(items, itemIndex) {
      return this.ej2Instances.addItem(items, itemIndex);
    },
    clear: function() {
      return this.ej2Instances.clear();
    },
    filter: function(dataSource, query, fields) {
      return this.ej2Instances.filter(dataSource, query, fields);
    },
    focusIn: function() {
      return this.ej2Instances.focusIn();
    },
    focusOut: function(e) {
      return this.ej2Instances.focusOut(e);
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    hidePopup: function(e) {
      return this.ej2Instances.hidePopup(e);
    },
    hideSpinner: function() {
      return this.ej2Instances.hideSpinner();
    },
    requiredModules: function() {
      return this.ej2Instances.requiredModules();
    },
    showPopup: function(e) {
      return this.ej2Instances.showPopup(e);
    },
    showSpinner: function() {
      return this.ej2Instances.showSpinner();
    }
  }
});
var AutoCompletePlugin = {
  name: "ejs-autocomplete",
  install: function(Vue) {
    Vue.component(AutoCompletePlugin.name, AutoCompleteComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/multi-select/multiselect.component.js
var properties4 = ["isLazyUpdate", "plugins", "actionFailureTemplate", "addTagOnBlur", "allowCustomValue", "allowFiltering", "changeOnBlur", "closePopupOnSelect", "cssClass", "dataSource", "delimiterChar", "enableGroupCheckBox", "enableHtmlSanitizer", "enablePersistence", "enableRtl", "enableSelectionOrder", "enabled", "fields", "filterBarPlaceholder", "filterType", "floatLabelType", "footerTemplate", "groupTemplate", "headerTemplate", "hideSelectedItem", "htmlAttributes", "ignoreAccent", "ignoreCase", "itemTemplate", "locale", "maximumSelectionLength", "mode", "noRecordsTemplate", "openOnClick", "placeholder", "popupHeight", "popupWidth", "query", "readonly", "selectAllText", "showClearButton", "showDropDownIcon", "showSelectAll", "sortOrder", "text", "unSelectAllText", "value", "valueTemplate", "width", "zIndex", "actionBegin", "actionComplete", "actionFailure", "beforeOpen", "beforeSelectAll", "blur", "change", "chipSelection", "close", "created", "customValueSelection", "dataBound", "destroyed", "filtering", "focus", "open", "removed", "removing", "select", "selectedAll", "tagging"];
var modelProps4 = ["value"];
var testProp4 = getProps({ props: properties4 });
var props4 = testProp4[0];
var watch4 = testProp4[1];
var emitProbs4 = Object.keys(watch4);
emitProbs4.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps4; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs4.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var MultiSelectComponent = vueDefineComponent({
  name: "MultiSelectComponent",
  mixins: [ComponentBase],
  props: props4,
  watch: watch4,
  emits: emitProbs4,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new MultiSelect({}),
      propKeys: properties4,
      models: modelProps4,
      hasChildDirective: false,
      hasInjectedModules: true,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    addItem: function(items, itemIndex) {
      return this.ej2Instances.addItem(items, itemIndex);
    },
    clear: function() {
      return this.ej2Instances.clear();
    },
    filter: function(dataSource, query, fields) {
      return this.ej2Instances.filter(dataSource, query, fields);
    },
    focusIn: function() {
      return this.ej2Instances.focusIn();
    },
    focusOut: function() {
      return this.ej2Instances.focusOut();
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    hidePopup: function(e) {
      return this.ej2Instances.hidePopup(e);
    },
    hideSpinner: function() {
      return this.ej2Instances.hideSpinner();
    },
    requiredModules: function() {
      return this.ej2Instances.requiredModules();
    },
    selectAll: function(state) {
      return this.ej2Instances.selectAll(state);
    },
    showPopup: function(e) {
      return this.ej2Instances.showPopup(e);
    },
    showSpinner: function() {
      return this.ej2Instances.showSpinner();
    }
  }
});
var MultiSelectPlugin = {
  name: "ejs-multiselect",
  install: function(Vue) {
    Vue.component(MultiSelectPlugin.name, MultiSelectComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/list-box/listbox.component.js
var properties5 = ["isLazyUpdate", "plugins", "actionFailureTemplate", "allowDragAndDrop", "allowFiltering", "cssClass", "dataSource", "enablePersistence", "enableRtl", "enabled", "fields", "filterBarPlaceholder", "filterType", "groupTemplate", "height", "ignoreAccent", "ignoreCase", "itemTemplate", "locale", "maximumSelectionLength", "noRecordsTemplate", "query", "scope", "selectionSettings", "sortOrder", "toolbarSettings", "value", "zIndex", "actionBegin", "actionComplete", "actionFailure", "beforeDrop", "beforeItemRender", "change", "created", "dataBound", "destroyed", "drag", "dragStart", "drop", "filtering", "select"];
var modelProps5 = ["value"];
var testProp5 = getProps({ props: properties5 });
var props5 = testProp5[0];
var watch5 = testProp5[1];
var emitProbs5 = Object.keys(watch5);
emitProbs5.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps5; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs5.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var ListBoxComponent = vueDefineComponent({
  name: "ListBoxComponent",
  mixins: [ComponentBase],
  props: props5,
  watch: watch5,
  emits: emitProbs5,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new ListBox({}),
      propKeys: properties5,
      models: modelProps5,
      hasChildDirective: false,
      hasInjectedModules: true,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    addItems: function(items, itemIndex) {
      return this.ej2Instances.addItems(items, itemIndex);
    },
    enableItems: function(items, enable, isValue) {
      return this.ej2Instances.enableItems(items, enable, isValue);
    },
    filter: function(dataSource, query, fields) {
      return this.ej2Instances.filter(dataSource, query, fields);
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getDataByValues: function(value) {
      return this.ej2Instances.getDataByValues(value);
    },
    getDataList: function() {
      return this.ej2Instances.getDataList();
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    getSortedList: function() {
      return this.ej2Instances.getSortedList();
    },
    hideSpinner: function() {
      return this.ej2Instances.hideSpinner();
    },
    moveAllTo: function(targetId, index) {
      return this.ej2Instances.moveAllTo(targetId, index);
    },
    moveBottom: function(value) {
      return this.ej2Instances.moveBottom(value);
    },
    moveDown: function(value) {
      return this.ej2Instances.moveDown(value);
    },
    moveTo: function(value, index, targetId) {
      return this.ej2Instances.moveTo(value, index, targetId);
    },
    moveTop: function(value) {
      return this.ej2Instances.moveTop(value);
    },
    moveUp: function(value) {
      return this.ej2Instances.moveUp(value);
    },
    removeItem: function(items, itemIndex) {
      return this.ej2Instances.removeItem(items, itemIndex);
    },
    removeItems: function(items, itemIndex) {
      return this.ej2Instances.removeItems(items, itemIndex);
    },
    requiredModules: function() {
      return this.ej2Instances.requiredModules();
    },
    selectAll: function(state) {
      return this.ej2Instances.selectAll(state);
    },
    selectItems: function(items, state, isValue) {
      return this.ej2Instances.selectItems(items, state, isValue);
    },
    showSpinner: function() {
      return this.ej2Instances.showSpinner();
    }
  }
});
var ListBoxPlugin = {
  name: "ejs-listbox",
  install: function(Vue) {
    Vue.component(ListBoxPlugin.name, ListBoxComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/drop-down-tree/dropdowntree.component.js
var properties6 = ["isLazyUpdate", "plugins", "actionFailureTemplate", "allowFiltering", "allowMultiSelection", "changeOnBlur", "cssClass", "customTemplate", "delimiterChar", "enableHtmlSanitizer", "enablePersistence", "enableRtl", "enabled", "fields", "filterBarPlaceholder", "filterType", "floatLabelType", "footerTemplate", "headerTemplate", "htmlAttributes", "ignoreAccent", "ignoreCase", "itemTemplate", "locale", "mode", "noRecordsTemplate", "placeholder", "popupHeight", "popupWidth", "readonly", "selectAllText", "showCheckBox", "showClearButton", "showDropDownIcon", "showSelectAll", "sortOrder", "text", "treeSettings", "unSelectAllText", "value", "width", "wrapText", "zIndex", "actionFailure", "beforeOpen", "blur", "change", "close", "created", "dataBound", "destroyed", "filtering", "focus", "keyPress", "open", "select"];
var modelProps6 = ["value"];
var testProp6 = getProps({ props: properties6 });
var props6 = testProp6[0];
var watch6 = testProp6[1];
var emitProbs6 = Object.keys(watch6);
emitProbs6.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps6; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs6.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var DropDownTreeComponent = vueDefineComponent({
  name: "DropDownTreeComponent",
  mixins: [ComponentBase],
  props: props6,
  watch: watch6,
  emits: emitProbs6,
  model: { event: "modelchanged" },
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new DropDownTree({}),
      propKeys: properties6,
      models: modelProps6,
      hasChildDirective: false,
      hasInjectedModules: false,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.ej2Instances._trigger = this.ej2Instances.trigger;
    this.ej2Instances.trigger = this.trigger;
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("input", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    trigger: function(eventName, eventProp, successHandler) {
      if (!isExecute) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if ((eventName === "change" || eventName === "input") && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/checked|value/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("update:modelValue", eventProp[propKey]);
          } else {
            if (eventName === "change" || this.$props && !this.$props.isLazyUpdate) {
              this.$emit("update:" + propKey, eventProp[propKey]);
              this.$emit("modelchanged", eventProp[propKey]);
            }
          }
        }
      } else if (eventName === "actionBegin" && eventProp.requestType === "dateNavigate" && this.models && this.models.length !== 0) {
        var key = this.models.toString().match(/currentView|selectedDate/) || [];
        var propKey = key[0];
        if (eventProp && key && !isUndefined(eventProp[propKey])) {
          if (!isExecute) {
            this.ej2Instances.vueInstance.$emit("update:" + propKey, eventProp[propKey]);
            this.ej2Instances.vueInstance.$emit("modelchanged", eventProp[propKey]);
          } else {
            this.$emit("update:" + propKey, eventProp[propKey]);
            this.$emit("modelchanged", eventProp[propKey]);
          }
        }
      }
      if (this.ej2Instances && this.ej2Instances._trigger) {
        this.ej2Instances._trigger(eventName, eventProp, successHandler);
      }
    },
    custom: function() {
      this.updated();
    },
    clear: function() {
      return this.ej2Instances.clear();
    },
    ensureVisible: function(item) {
      return this.ej2Instances.ensureVisible(item);
    },
    getData: function(item) {
      return this.ej2Instances.getData(item);
    },
    getLocaleName: function() {
      return this.ej2Instances.getLocaleName();
    },
    hidePopup: function() {
      return this.ej2Instances.hidePopup();
    },
    selectAll: function(state) {
      return this.ej2Instances.selectAll(state);
    },
    showPopup: function() {
      return this.ej2Instances.showPopup();
    }
  }
});
var DropDownTreePlugin = {
  name: "ejs-dropdowntree",
  install: function(Vue) {
    Vue.component(DropDownTreePlugin.name, DropDownTreeComponent);
  }
};

// node_modules/@syncfusion/ej2-vue-dropdowns/src/mention/mention.component.js
var properties7 = ["isLazyUpdate", "plugins", "allowSpaces", "cssClass", "dataSource", "displayTemplate", "fields", "filterType", "highlight", "ignoreCase", "itemTemplate", "locale", "mentionChar", "minLength", "noRecordsTemplate", "popupHeight", "popupWidth", "query", "showMentionChar", "sortOrder", "spinnerTemplate", "suffixText", "suggestionCount", "target", "actionBegin", "actionComplete", "actionFailure", "beforeOpen", "change", "closed", "created", "destroyed", "filtering", "opened", "select"];
var modelProps7 = [];
var testProp7 = getProps({ props: properties7 });
var props7 = testProp7[0];
var watch7 = testProp7[1];
var emitProbs7 = Object.keys(watch7);
emitProbs7.push("modelchanged", "update:modelValue");
for (_i = 0, modelProps_1 = modelProps7; _i < modelProps_1.length; _i++) {
  props_1 = modelProps_1[_i];
  emitProbs7.push("update:" + props_1);
}
var props_1;
var _i;
var modelProps_1;
var MentionComponent = vueDefineComponent({
  name: "MentionComponent",
  mixins: [ComponentBase],
  props: props7,
  watch: watch7,
  emits: emitProbs7,
  provide: function() {
    return { custom: this.custom };
  },
  data: function() {
    return {
      ej2Instance: new Mention({}),
      propKeys: properties7,
      models: modelProps7,
      hasChildDirective: false,
      hasInjectedModules: false,
      tagMapper: {},
      tagNameMapper: {},
      isVue3: !isExecute,
      templateCollection: {}
    };
  },
  created: function() {
    this.bindProperties();
    this.ej2Instances._setProperties = this.ej2Instances.setProperties;
    this.ej2Instances.setProperties = this.setProperties;
    this.ej2Instances.clearTemplate = this.clearTemplate;
    this.updated = this.updated;
  },
  render: function(createElement) {
    var h = !isExecute ? gh : createElement;
    var slots = null;
    if (!isNullOrUndefined(this.$slots.default)) {
      slots = !isExecute ? this.$slots.default() : this.$slots.default;
    }
    return h("div", slots);
  },
  methods: {
    clearTemplate: function(templateNames) {
      if (!templateNames) {
        templateNames = Object.keys(this.templateCollection || {});
      }
      if (templateNames.length && this.templateCollection) {
        for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {
          var tempName = templateNames_1[_i];
          var elementCollection = this.templateCollection[tempName];
          if (elementCollection && elementCollection.length) {
            for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {
              var ele = elementCollection_1[_a];
              var destroy = getValue("__vue__.$destroy", ele);
              if (destroy) {
                ele.__vue__.$destroy();
              }
              if (ele.innerHTML) {
                ele.innerHTML = "";
              }
            }
            delete this.templateCollection[tempName];
          }
        }
      }
    },
    setProperties: function(prop, muteOnChange) {
      var _this = this;
      if (this.isVue3) {
        this.models = !this.models ? this.ej2Instances.referModels : this.models;
      }
      if (this.ej2Instances && this.ej2Instances._setProperties) {
        this.ej2Instances._setProperties(prop, muteOnChange);
      }
      if (prop && this.models && this.models.length) {
        Object.keys(prop).map(function(key) {
          _this.models.map(function(model) {
            if (key === model && !/datasource/i.test(key)) {
              if (_this.isVue3) {
                _this.ej2Instances.vueInstance.$emit("update:" + key, prop[key]);
              } else {
                _this.$emit("update:" + key, prop[key]);
                _this.$emit("modelchanged", prop[key]);
              }
            }
          });
        });
      }
    },
    custom: function() {
      this.updated();
    },
    addItem: function(items, itemIndex) {
      return this.ej2Instances.addItem(items, itemIndex);
    },
    getDataByValue: function(value) {
      return this.ej2Instances.getDataByValue(value);
    },
    getItems: function() {
      return this.ej2Instances.getItems();
    },
    hidePopup: function(e) {
      return this.ej2Instances.hidePopup(e);
    },
    search: function(text, positionX, positionY) {
      return this.ej2Instances.search(text, positionX, positionY);
    },
    showPopup: function() {
      return this.ej2Instances.showPopup();
    }
  }
});
var MentionPlugin = {
  name: "ejs-mention",
  install: function(Vue) {
    Vue.component(MentionPlugin.name, MentionComponent);
  }
};
export {
  AutoComplete,
  AutoCompleteComponent,
  AutoCompletePlugin,
  CheckBoxSelection,
  ComboBox,
  ComboBoxComponent,
  ComboBoxPlugin,
  DropDownBase,
  DropDownList,
  DropDownListComponent,
  DropDownListPlugin,
  DropDownTree,
  DropDownTreeComponent,
  DropDownTreePlugin,
  FieldSettings,
  Fields,
  ListBox,
  ListBoxComponent,
  ListBoxPlugin,
  Mention,
  MentionComponent,
  MentionPlugin,
  MultiSelect,
  MultiSelectComponent,
  MultiSelectPlugin,
  Search,
  SelectionSettings,
  ToolbarSettings,
  TreeSettings,
  VirtualScroll,
  createFloatLabel,
  dropDownBaseClasses,
  dropDownListClasses,
  encodePlaceholder,
  escapeCharRegExp,
  floatLabelBlur,
  floatLabelFocus,
  highlightSearch,
  incrementalSearch,
  removeFloating,
  resetIncrementalSearchValues,
  revertHighlightSearch,
  setPlaceHolder,
  updateFloatLabelState
};
//# sourceMappingURL=@syncfusion_ej2-vue-dropdowns.js.map
